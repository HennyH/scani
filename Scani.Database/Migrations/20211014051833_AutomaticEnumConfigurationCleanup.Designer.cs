// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scani.Database;

#nullable disable

namespace Scani.Database.Migrations
{
    [DbContext(typeof(ScaniContext))]
    [Migration("20211014051833_AutomaticEnumConfigurationCleanup")]
    partial class AutomaticEnumConfigurationCleanup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5");

            modelBuilder.Entity("Scani.Database.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudent", b =>
                {
                    b.Property<int>("ClassStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassStudentId");

                    b.HasIndex("UserId");

                    b.HasIndex("ClassId", "UserId")
                        .IsUnique();

                    b.ToTable("ClassStudents");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudentGroup", b =>
                {
                    b.Property<int>("ClassStudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassStudentGroupId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassStudentGroups");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudentGroupMember", b =>
                {
                    b.Property<int>("ClassStudentGroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassStudentGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassStudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassStudentGroupMemberId");

                    b.HasIndex("ClassStudentId");

                    b.HasIndex("ClassStudentGroupId", "ClassStudentId")
                        .IsUnique();

                    b.ToTable("ClassStudentGroupMembers");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassTeacher", b =>
                {
                    b.Property<int>("ClassTeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassTeacherId");

                    b.HasIndex("UserId");

                    b.HasIndex("ClassId", "UserId")
                        .IsUnique();

                    b.ToTable("ClassTeachers");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassTime", b =>
                {
                    b.Property<int>("ClassTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassTimeId");

                    b.HasIndex("ClassId", "StartTime")
                        .IsUnique();

                    b.ToTable("ClassTimes");
                });

            modelBuilder.Entity("Scani.Database.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Scani.Database.Entities.ItemSet", b =>
                {
                    b.Property<int>("ItemSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemSetId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ItemSets");
                });

            modelBuilder.Entity("Scani.Database.Entities.ItemSetItem", b =>
                {
                    b.Property<int>("ItemSetItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemSetItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemSetId", "ItemId")
                        .IsUnique();

                    b.ToTable("ItemSetItems");
                });

            modelBuilder.Entity("Scani.Database.Entities.Loan", b =>
                {
                    b.Property<int>("LoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoadId");

                    b.HasIndex("LoanGroupId")
                        .IsUnique();

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanGroup", b =>
                {
                    b.Property<int>("LoanGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("LoanGroupId");

                    b.ToTable("LoansGroups");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanGroupMember", b =>
                {
                    b.Property<int>("LoanGroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoanGroupMemberId");

                    b.HasIndex("LoanGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("LoansGroupsMembers");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanItemLine", b =>
                {
                    b.Property<int>("LoanItemLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoanItemLineId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LoanId", "ItemId")
                        .IsUnique();

                    b.ToTable("LoanItemLines");
                });

            modelBuilder.Entity("Scani.Database.Entities.ScanCode", b =>
                {
                    b.Property<int>("ScanCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("BarCodeBytes")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("QrCodeBytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScanCodeId");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("ScanCodes");
                });

            modelBuilder.Entity("Scani.Database.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("SaltBytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("ScanCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("ScanCodeId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Scani.Database.Entities.UserRoleEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Ordinal")
                        .IsUnique();

                    b.ToTable("UserRoleEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "student",
                            Name = "Student",
                            Ordinal = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "teacher",
                            Name = "Teacher",
                            Ordinal = 2
                        });
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudent", b =>
                {
                    b.HasOne("Scani.Database.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudentGroup", b =>
                {
                    b.HasOne("Scani.Database.Entities.Class", "Class")
                        .WithMany("StudentGroups")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudentGroupMember", b =>
                {
                    b.HasOne("Scani.Database.Entities.ClassStudentGroup", "ClassStudentGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("ClassStudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.ClassStudent", "ClassStudent")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("ClassStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassStudent");

                    b.Navigation("ClassStudentGroup");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassTeacher", b =>
                {
                    b.HasOne("Scani.Database.Entities.Class", "Class")
                        .WithMany("Teachers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassTime", b =>
                {
                    b.HasOne("Scani.Database.Entities.Class", "Class")
                        .WithMany("ClassTimes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Scani.Database.Entities.ItemSetItem", b =>
                {
                    b.HasOne("Scani.Database.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.ItemSet", "ItemSet")
                        .WithMany()
                        .HasForeignKey("ItemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemSet");
                });

            modelBuilder.Entity("Scani.Database.Entities.Loan", b =>
                {
                    b.HasOne("Scani.Database.Entities.LoanGroup", "LoanGroup")
                        .WithOne("Loan")
                        .HasForeignKey("Scani.Database.Entities.Loan", "LoanGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanGroup");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanGroupMember", b =>
                {
                    b.HasOne("Scani.Database.Entities.LoanGroup", "LoanGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("LoanGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanItemLine", b =>
                {
                    b.HasOne("Scani.Database.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.Loan", "Loan")
                        .WithMany("ItemLines")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Scani.Database.Entities.User", b =>
                {
                    b.HasOne("Scani.Database.Entities.ScanCode", "ScanCode")
                        .WithMany()
                        .HasForeignKey("ScanCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scani.Database.Entities.UserRoleEnum", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScanCode");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Scani.Database.Entities.Class", b =>
                {
                    b.Navigation("ClassTimes");

                    b.Navigation("StudentGroups");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudent", b =>
                {
                    b.Navigation("GroupMemberships");
                });

            modelBuilder.Entity("Scani.Database.Entities.ClassStudentGroup", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("Scani.Database.Entities.Loan", b =>
                {
                    b.Navigation("ItemLines");
                });

            modelBuilder.Entity("Scani.Database.Entities.LoanGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Loan");
                });
#pragma warning restore 612, 618
        }
    }
}
