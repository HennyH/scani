@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject Scani.Kiosk.Backends.GoogleSheet.KioskSheetSynchronizer SheetSynchronizer

<KeySequenceReader OnKeySequenceEntered="@HandleKeySequenceEntered" />

<div class="equipment-checkout-menu">
    <form @onclick="HandleManualScancodeFormSubmit" @onclick:preventDefault @onclick:stopPropagation>
        <label>
            <img src="assets/images/barcode.svg" style="width: 50px" /> Equipment Scancode:
            <input required type="text" @bind-value="@_scancode" />
        </label>
        <input type="submit" value="Enter" />
    </form>
    <ol class="equipment-pools">
        <li class="equipment-pool">
            <h2><img src="/assets/images/shop.svg" style="height: 80px" /> Available</h2>
            @if (_unloanedEquipment != null)
            {
                <div class="equipment-list">
                    <ul>
                        @foreach (var equipment in _unloanedEquipment)
                        {
                            @if (IsEquipmentAvailableForTaking(equipment))
                            {
                                <li @key="@equipment.Scancode">
                                    <EquipmentCard Equipment="@equipment" ActionName="Add to Cart" OnAction="e => _cart.ToggleTake(e)" />
                                </li>
                            }
                        }
                    </ul>
                </div>
            }
            else
            {
                <LoadingSpinner />
            }
        </li>
        <li class="equipment-pool">
            <h2><img src="/assets/images/basket.svg" style="height: 80px" />Cart</h2>
            @if (_cart.Takes.Any())
            {
                <div class="equipment-list">
                    <h3>Takes</h3>
                    <ul class="equipment-list">
                        @foreach (var equipment in _cart.Takes)
                        {
                            <li @key="@equipment.Scancode">
                                <EquipmentCard Equipment="@equipment" ActionName="Remove from Cart" OnAction="e => _cart.ToggleTake(e)" />
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (_cart.SelfReturns.Any())
            {
                <div class="equipment-list">
                    <h3>Self Returns</h3>
                    <ul class="equipment-list">
                        @foreach (var equipment in _cart.SelfReturns)
                        {
                            <li @key="@equipment.Scancode">
                                <EquipmentCard Equipment="@equipment" ActionName="Cancel Return" OnAction="e => _cart.ToggleSelfReturn(e)" />
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (_cart.DelegatedReturns.Any())
            {
                <div class="equipment-list">
                    <h3>Delegated Returns</h3>
                    <ul class="equipment-list">
                        @foreach (var equipment in _cart.DelegatedReturns)
                        {
                            <li @key="@equipment.Scancode">
                                <EquipmentCard Equipment="@equipment" ActionName="Cancel Return" OnAction="e => _cart.ToggleDelegatedReturn(e)" />
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (_cart.IsEmpty)
            {
                <p style="text-align: center;">Your cart is empty :(</p>
            }
        </li>
        <li class="equipment-pool">
            <h2><img src="/assets/images/stuff.svg" style="height: 80px" /> Loaned</h2>
            @if (_myLoanedEquipment != null)
            {
                <div class="equipment-list">
                    <ul>
                        @foreach (var equipment in _myLoanedEquipment)
                        {
                            @if (!IsEquipmentBeingReturned(equipment))
                            {
                                <li @key="@equipment.Scancode">
                                    <EquipmentCard Equipment="@equipment" />
                                </li>
                            }
                        }
                    </ul>
                </div>
            }
            else
            {
                <LoadingSpinner />
            }
        </li>
    </ol>
</div>

@code {
    [Parameter] public EventCallback<EquipmentCheckoutCart> OnCartChanged { get; set; } = EventCallback<EquipmentCheckoutCart>.Empty;
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private EquipmentCheckoutCart _cart = new();
    private IEnumerable<EquipmentRow>? _allEquipment = null;
    private IEnumerable<EquipmentRow>? _unloanedEquipment = null;
    private IEnumerable<EquipmentRow>? _myLoanedEquipment = null;
    private IEnumerable<LoanRow>? _allActiveLoans = null;
    private string _scancode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _allEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.Equipment));
        _allActiveLoans = await KioskState.ReadStateAsync(s => Task.FromResult(s.ActiveLoans));
        _unloanedEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.UnloanedEquipment));
        _myLoanedEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.EquipmentLoanedToUser(ActiveUserState.User!.Scancode)));

        _cart.OnCartChanged += HandleCartChanged;
    }

    protected bool IsEquipmentAvailableForTaking(EquipmentRow equipment)
    {
        return _unloanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true
            && !_cart.ScancodesInCart.Contains(equipment.Scancode);
    }

    protected bool IsEquipmentBeingReturned(EquipmentRow equipment)
    {
        return _cart.TryGetCartItemTypeForEquipment(equipment, out var cartItemType)
            && (cartItemType == CartItemType.SelfReturn || cartItemType == CartItemType.DelegatedReturn);
    }

    protected async Task HandleScancodeEntered(string scancode)
    {
        var equipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.EquipmentWithScancode(scancode)));
        if (equipment == null)
        {
            return;
        }
        else if (_unloanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true)
        {
            _cart.ToggleTake(equipment);
        }
        else if (_myLoanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true)
        {
            _cart.ToggleSelfReturn(equipment);
        }
        else if (_allActiveLoans?.Any(e => e.EquipmentScancode == equipment.Scancode) == true)
        {
            _cart.ToggleDelegatedReturn(equipment);
        }
    }

    protected async Task HandleManualScancodeFormSubmit()
    {
        if (!string.IsNullOrWhiteSpace(_scancode))
        {
            await HandleScancodeEntered(_scancode);
        }

        _scancode = string.Empty;
    }

    private void HandleCartChanged(EquipmentCheckoutCart _)
    {
        OnCartChanged.InvokeAsync(_cart);
    }

    private async Task HandleKeySequenceEntered(IReadOnlyCollection<string> keys)
    {
        var scancode = string.Join("", keys);
        await HandleScancodeEntered(scancode);
    }

    public void Dispose()
    {
        _cart.OnCartChanged -= HandleCartChanged;
    }
}
