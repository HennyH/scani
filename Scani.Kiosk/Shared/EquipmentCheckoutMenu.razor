@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject Scani.Kiosk.Backends.GoogleSheet.KioskSheetSynchronizer SheetSynchronizer

<form @onclick="HandleManualScancodeFormSubmit" @onclick:preventDefault @onclick:stopPropagation>
    <label>Scancode: </label>
    <img src="assets/images/barcode.svg" style="width: 50px" />
    <input required type="text" @bind-value="@_scancode" />
    <input type="submit" value="Enter" />
</form>
<ol id="equipment-pools">
    <li id="available-pool" class="pool">
        <h2><img src="/assets/images/shop.svg" />Available</h2>
        @if (_unloanedEquipment == null)
        {
            <LoadingSpinner Style="align-self: center;" />
        }
        else if (_unloanedEquipment.Any(IsEquipmentAvailableForTaking))
        {
            <ul>
                @foreach (var equipment in _unloanedEquipment)
                {
                    @if (IsEquipmentAvailableForTaking(equipment))
                    {
                        <li @key="@equipment.Scancode">
                            <EquipmentCard Equipment="@equipment" ActionName="Take" OnAction="e => _cart.ToggleTakeAsync(e)" />
                        </li>
                    }
                }
            </ul>

        }
        else
        {
            <p style="text-align: center;">There is no equipment available for the taking :(</p>
        }
    </li>
    <li id="cart-pool" class="pool">
        <h2><img src="/assets/images/basket.svg" />Cart</h2>
        @if (_cart.Takes.Any())
        {
            <h3>Takes</h3>
            <ul>
                @foreach (var equipment in _cart.Takes)
                {
                    <li @key="@equipment.Scancode">
                        <EquipmentCard Equipment="@equipment" ActionName="Remove" OnAction="e => _cart.ToggleTakeAsync(e)" />
                    </li>
                }
            </ul>
        }
        @if (_cart.SelfReturns.Any())
        {
            <h3>Self Returns</h3>
            <ul>
                @foreach (var equipment in _cart.SelfReturns)
                {
                    <li @key="@equipment.Scancode">
                        <EquipmentCard Equipment="@equipment" ActionName="Remove" OnAction="e => _cart.ToggleSelfReturnAsync(e)" />
                    </li>
                }
            </ul>
        }
        @if (_cart.DelegatedReturns.Any())
        {
            <h3>Delegated Returns</h3>
            <ul>
                @foreach (var equipment in _cart.DelegatedReturns)
                {
                    <li @key="@equipment.Scancode">
                        <EquipmentCard Equipment="@equipment" ActionName="Remove" OnAction="e => _cart.ToggleDelegatedReturnAsync(e)" />
                    </li>
                }
            </ul>
        }
        @if (_cart.IsEmpty)
        {
            <p style="text-align: center;">Your cart is empty :(</p>
        }
    </li>
    <li id="loaned-pool" class="pool">
        <h2><img src="/assets/images/stuff.svg" />Loaned</h2>
        @if (_myLoanedEquipment == null)
        {
            <LoadingSpinner Style="align-self: center;" />
        }
        else if (_myLoanedEquipment.Any(e => !IsEquipmentBeingReturned(e)))
        {
            <ul>
                @foreach (var equipment in _myLoanedEquipment)
                {
                    @if (!IsEquipmentBeingReturned(equipment))
                    {
                        <li @key="@equipment.Scancode">
                            <EquipmentCard Equipment="@equipment" />
                        </li>
                    }
                }
            </ul>
        }
        else
        {
            <p style="text-align: center;">You aren't loaning any items at the moment.</p>
        }
    </li>
</ol>


@code {
    [Parameter] public EventCallback<EquipmentCheckoutCart> OnCartChanged { get; set; } = EventCallback<EquipmentCheckoutCart>.Empty;
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private EquipmentCheckoutCart _cart = new();
    private IEnumerable<EquipmentRow>? _allEquipment = null;
    private IEnumerable<EquipmentRow>? _unloanedEquipment = null;
    private IEnumerable<EquipmentRow>? _myLoanedEquipment = null;
    private IEnumerable<LoanRow>? _allActiveLoans = null;
    private string _scancode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _allEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.Equipment));
        _allActiveLoans = await KioskState.ReadStateAsync(s => Task.FromResult(s.ActiveLoans));
        _unloanedEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.UnloanedEquipment));
        _myLoanedEquipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.EquipmentLoanedToUser(ActiveUserState.User!.Scancode)));

        _cart.OnCartChanged += HandleCartChangedAsync;
    }

    protected bool IsEquipmentAvailableForTaking(EquipmentRow equipment)
    {
        return _unloanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true
            && !_cart.ScancodesInCart.Contains(equipment.Scancode);
    }

    protected bool IsEquipmentBeingReturned(EquipmentRow equipment)
    {
        return _cart.TryGetCartItemTypeForEquipment(equipment, out var cartItemType)
            && (cartItemType == CartItemType.SelfReturn || cartItemType == CartItemType.DelegatedReturn);
    }

    public async Task HandleScancodeEntered(string scancode)
    {
        var equipment = await KioskState.ReadStateAsync(s => Task.FromResult(s.EquipmentWithScancode(scancode)));
        if (equipment == null)
        {
            return;
        }
        else if (_unloanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true)
        {
            await _cart.ToggleTakeAsync(equipment);
        }
        else if (_myLoanedEquipment?.Any(e => e.Scancode == equipment.Scancode) == true)
        {
            await _cart.ToggleSelfReturnAsync(equipment);
        }
        else if (_allActiveLoans?.Any(e => e.EquipmentScancode == equipment.Scancode) == true)
        {
            await _cart.ToggleDelegatedReturnAsync(equipment);
        }
    }

    protected async Task HandleManualScancodeFormSubmit()
    {
        if (!string.IsNullOrWhiteSpace(_scancode))
        {
            await HandleScancodeEntered(_scancode);
        }

        _scancode = string.Empty;
    }

    private async Task HandleCartChangedAsync(EquipmentCheckoutCart _)
    {
        await OnCartChanged.InvokeAsync(_cart);
    }

    private async Task HandleKeySequenceEntered(IReadOnlyCollection<string> keys)
    {
        var scancode = string.Join("", keys);
        await HandleScancodeEntered(scancode);
    }

    public void Dispose()
    {
        _cart.OnCartChanged -= HandleCartChangedAsync;
    }
}
