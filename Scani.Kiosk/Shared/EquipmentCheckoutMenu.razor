@implements IDisposable
@inject IKioskBackend KioskBackend
@inject Scani.Kiosk.Backends.GoogleSheet.GoogleSheetSynchronizer SheetSynchronizer

<KeySequenceReader OnKeySequenceEntered="@HandleKeySequenceEntered" />

<div class="equipment-checkout-menu">
    <form @onclick="HandleManualScancodeFormSubmit" @onclick:preventDefault @onclick:stopPropagation>
        <label>
            <img src="assets/images/barcode.svg" style="width: 50px" /> Equipment Scancode:
            <input required type="text" @bind-value="@_scancode" />
        </label>
        <input type="submit" value="Enter" />
    </form>
    <ol class="equipment-pools">
        <li class="equipment-pool">
            <h2><img src="/assets/images/shop.svg" style="height: 80px" /> Available</h2>
            @if (_availableEquipment != null)
            {
                <div class="equipment-list">
                    <ul>
                        @foreach (var equipment in _availableEquipment)
                        {
                            @if (_cart.IsInCart(equipment))
                            {
                                continue;
                            }
                            <li @key="@equipment.Id">
                                <EquipmentCard Equipment="@equipment" ActionName="Add to Cart" OnAction="AddItemToCart" />
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <LoadingSpinner />
            }
        </li>
        <li class="equipment-pool">
            <h2><img src="/assets/images/basket.svg" style="height: 80px" />Cart</h2>
            @if (_cart.RequestedEquipment.Any())
            {
                <div class="equipment-list">
                    <h3>Take</h3>
                    <ul class="equipment-list">
                        @foreach (var equipment in _cart.RequestedEquipment)
                        {
                            <li @key="@equipment.Id">
                                <EquipmentCard Equipment="@equipment" ActionName="Remove from Cart" OnAction="RemoteItemFromCart" />
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (_cart.ReturnedEquipment.Any())
            {
                <div class="equipment-list">
                    <h3>Return</h3>
                    <ul class="equipment-list">
                        @foreach (var equipment in _cart.ReturnedEquipment)
                        {
                            <li @key="@equipment.Id">
                                <EquipmentCard Equipment="@equipment" ActionName="Cancel Return" OnAction="CancelReturnItem" />
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (_cart.IsEmpty)
            {
                <p style="text-align: center;">Your cart is empty :(</p>
            }
        </li>
        <li class="equipment-pool">
            <h2><img src="/assets/images/stuff.svg" style="height: 80px" /> Loaned</h2>
            @if (_loanedEquipment != null)
            {
                <div class="equipment-list">
                    <ul>
                        @foreach (var equipment in _loanedEquipment)
                        {
                            @if (_cart.HasReturned(equipment))
                            {
                                continue;
                            }
                            <li @key="@equipment.Id">
                                <EquipmentCard Equipment="@equipment" />
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <LoadingSpinner />
            }
        </li>
    </ol>
</div>

@code {
    [Parameter] public EventCallback<EquipmentCheckoutCart> OnCartChanged { get; set; } = EventCallback<EquipmentCheckoutCart>.Empty;
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private EquipmentCheckoutCart _cart = new();
    private IEnumerable<EquipmentInfo>? _availableEquipment = null;
    private IEnumerable<EquipmentInfo>? _loanedEquipment = null;
    private string _scancode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _availableEquipment = await KioskBackend.GetAllAvailableEquipmentAsync();
        _loanedEquipment = await KioskBackend.GetEquipmentLoanedToUserAsync(ActiveUserState.UserInfo!.Id);

        _cart.OnCartChanged += HandleCartChanged;
    }

    protected async Task HandleScancodeEntered(string scancode)
    {
        var matchingEquipment = await KioskBackend.GetEquipmentByScancodeAsync(scancode);
        if (matchingEquipment == null)
        {
            return;
        }
        else if (_cart.HasReturned(matchingEquipment))
        {
            _cart.CancelReturnItem(matchingEquipment);
        }
        else if (_cart.IsInCart(matchingEquipment))
        {
            _cart.RemoveItemToCart(matchingEquipment);
        }
        else if (_loanedEquipment?.Any(e => e.Id == matchingEquipment.Id) == true)
        {
            _cart.ReturnItem(matchingEquipment);
        }
        else if (_availableEquipment?.Any(e => e.Id == matchingEquipment.Id) == true)
        {
            _cart.AddItemToCart(matchingEquipment);
        }
    }

    protected async Task HandleManualScancodeFormSubmit()
    {
        if (!string.IsNullOrWhiteSpace(_scancode))
        {
            await HandleScancodeEntered(_scancode);
        }

        _scancode = string.Empty;
    }

    private void AddItemToCart(EquipmentInfo equipment)
    {
        _cart.AddItemToCart(equipment);
    }

    private void RemoteItemFromCart(EquipmentInfo equipment)
    {
        _cart.RemoveItemToCart(equipment);
    }

    private void CancelReturnItem(EquipmentInfo equipment)
    {
        _cart.CancelReturnItem(equipment);
    }

    private void HandleCartChanged(EquipmentCheckoutCart _)
    {
        OnCartChanged.InvokeAsync(_cart);
    }

    private async Task HandleKeySequenceEntered(IReadOnlyCollection<string> keys)
    {
        var scancode = string.Join("", keys);
        await HandleScancodeEntered(scancode);
    }

    public void Dispose()
    {
        _cart.OnCartChanged -= HandleCartChanged;
    }
}
