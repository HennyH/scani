@implements IAsyncDisposable
@inject IJSRuntime JsRuntime
@inject ILogger<KeySequenceReader> Logger


@code {
    [Parameter] public TimeSpan KeySequenceTimeout { get; set; } = TimeSpan.FromSeconds(1);
    [Parameter] public EventCallback<IReadOnlyCollection<string>> OnKeySequenceEntered { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync(
                "registerKeySequenceListener",
                DotNetObjectReference.Create(this),
                nameof(HandleKeySequenceEntered),
                KeySequenceTimeout.TotalMilliseconds
            );
        }
    }

    [JSInvokable]
    public async Task HandleKeySequenceEntered(IReadOnlyCollection<string> keys)
    {
        Logger.LogInformation("Key sequence entered: {0}", keys);
        await OnKeySequenceEntered.InvokeAsync(keys);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("deregisterKeySequenceListener");
        }
        catch (InvalidOperationException)
        { }
    }
}
