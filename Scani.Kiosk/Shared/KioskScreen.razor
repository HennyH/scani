@implements IDisposable
@inject SynchronizedKioskState KioskState

<div id="kiosk-screen">
    <header>
        <h1>@Title</h1>
        @if (ActiveUserState.User != null)
        {
            <p>Welcome <span class="name">@ActiveUserState.User.DisplayName</span></p>
        }
        else
        {
            <p>Welcome Anon!</p>
        }
        @if (_loaded)
        {
            <StatusIndicator />
        }
        else
        {
            <LoadingSpinner />
        }
    </header>
    <main style="@(_loaded ? "" : "display: grid; justify-items: center; align-items: center")">
        @if (_loaded)
        {
            @if (ActiveUserState.HasActiveUser)
            {
                @Screen
            }
            else
            {
                <LoginMenu />
            }
        }
        else
        {
            <LoadingSpinner />
        }
    </main>
    <footer>
        @if (ActiveUserState.HasActiveUser)
        {
            @Footer   
        }
    </footer>
</div>


@code {
    [Parameter] public string Title { get; set; } = "Kiosk";
    [Parameter] public RenderFragment? Footer { get; set; }
    [Parameter] public RenderFragment? Screen { get; set; }
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private bool _loaded = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await KioskState.ReadStateAsync(async state =>
        {
            _loaded = state.StudentsSheet != null
                      && state.EquipmentSheet != null
                      && state.LoanSheet != null;
        });
        KioskState.StateChanged += HandleKioskStateChanged;
    }

    private async void HandleKioskStateChanged()
    {
        await KioskState.ReadStateAsync(async state =>
        {
            _loaded = state.StudentsSheet != null
                      && state.EquipmentSheet != null
                      && state.LoanSheet != null;
            await InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        KioskState.StateChanged -= HandleKioskStateChanged;
    }
}
