@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject NavigationManager NavigationManager

<section id="kiosk-screen">
    <header class="bg-dark text-white">
        <h1>@Title</h1>

        <p class="welcome-message">Welcome, <span class="name">@(ActiveUserState.User?.DisplayName ?? "Anon")</span>!</p>

        <WebcamStatusIndicator />

        @if (_loaded)
        {
            <KioskStateStatusIndicator />
        }
    </header>
    <main style="@(_loaded ? MainStyle : "display: grid; justify-items: center; align-items: center")">
        @if (_loaded)
        {
            @if (ActiveUserState.HasActiveUser || AllowAnonymous)
            {
                @Screen
            }
            else if (!ActiveUserState.HasActiveUser && AllowAnonymous)
            {
                <AccessDenied />
            }
        }
        else
        {
            <LoadingSpinner />
        }
    </main>
    <footer>
        @if (ActiveUserState.HasActiveUser)
        {
            @Footer   
        }
    </footer>
</section>


@code {
    [Parameter] public string Title { get; set; } = "Kiosk";
    [Parameter] public RenderFragment? Footer { get; set; }
    [Parameter] public RenderFragment? Screen { get; set; }
    [Parameter] public bool AllowAnonymous { get; set; } = false;
    [Parameter] public string? MainStyle { get; set; }
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private bool _loaded = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await HandleKioskStateChanged();
        KioskState.StateChanged += HandleKioskStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!ActiveUserState.HasActiveUser && !AllowAnonymous)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task HandleKioskStateChanged()
    {
        if (!_loaded)
        {
            await KioskState.ReadStateAsync(state =>
            {
                _loaded = state.HasLoaded;
                return Task.CompletedTask;
            });

            if (_loaded)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public void Dispose()
    {
        KioskState.StateChanged -= HandleKioskStateChanged;
    }
}
