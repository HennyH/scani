@using System.Globalization
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject SynchronizedKioskState KioskState

<button
    type="button"
    class="btn btn-dark kiosk-state-indicator"
    @onclick="HandleStatusIndicatorButtonClicked"
>
    <img src="@(_ok ? "/assets/images/okay.svg" : "/assets/images/error.svg")" />
@*    @if (_lastUpdated.HasValue)
    {
        <span class="last-updated-time">
            Last Updated @(TimeZoneInfo.ConvertTime(_lastUpdated.Value, (ActiveUserState?.TimeZone ?? TimeZoneInfo.Local)).ToShortTimeString())
        </span>
    }*@
</button>

<Modal
    Title="Kiosk Status"
    IsVisable="_isModalVisable"
    OnModalDismissedFromJs="() => _isModalVisable = false"
>
    <Body>
        @if (_ok)
        {
            <p>Everything looks good - well done!</p>
        }
        else
        {
            <h5 style="text-align: center">Errors</h5>
        }

        @if (_studentErrors.Any())
        {
            <h6>Students</h6>
            <ul>
                @foreach (var error in _studentErrors)
                {
                    <li>@error.Message</li>
                }
            </ul>
        }

        @if (_equipmentErrors.Any())
        {
            <h6>Equipment</h6>
            <ul>
                @foreach (var error in _equipmentErrors)
                {
                    <li>@error.Message</li>
                }
            </ul>
        }

        @if (_loanErrors.Any())
        {
            <h6>Loans</h6>
            <ul>
                @foreach (var error in _loanErrors)
                {
                    <li>@error.Message</li>
                }
            </ul>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    </Footer>
</Modal>

@code {
    [CascadingParameter] public ActiveUserState ActiveUserState { get; set; } = null!;
    private List<KioskSheetReadError> _loanErrors = new List<KioskSheetReadError>();
    private List<KioskSheetReadError> _studentErrors = new List<KioskSheetReadError>();
    private List<KioskSheetReadError> _equipmentErrors = new List<KioskSheetReadError>();
    private bool _ok => !_loanErrors.Any() && !_studentErrors.Any() && !_equipmentErrors.Any();
    private DateTime? _lastUpdated = null;
    private bool _isModalVisable = false;

    protected override async Task OnInitializedAsync()
    {
        await KioskState.ReadStateAsync(state =>
        {
            _loanErrors = state.LoanSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _studentErrors = state.UsersSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _equipmentErrors = state.EquipmentSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _lastUpdated = state.LastModified;
            return Task.CompletedTask;
        });
        KioskState.StateChanged += HandleKioskStateChanged;
    }

    protected async Task HandleKioskStateChanged()
    {
        await KioskState.ReadStateAsync(async state =>
        {
            _loanErrors = state.LoanSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _studentErrors = state.UsersSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _equipmentErrors = state.EquipmentSheet?.Errors?.ToList() ?? new List<KioskSheetReadError>();
            _lastUpdated = state.LastModified;
            await InvokeAsync(StateHasChanged);
        });
    }

    private void HandleStatusIndicatorButtonClicked()
    {
        _isModalVisable = true;
    }

    public void Dispose()
    {
        KioskState.StateChanged -= HandleKioskStateChanged;
    }
}
