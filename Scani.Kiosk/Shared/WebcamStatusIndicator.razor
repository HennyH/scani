@implements IDisposable
@inject IJSRuntime JsRuntime

<button class="btn btn-dark" @onclick="_ => _isModalVisable = true" style="position: relative;">
    <img src="/assets/images/lens.svg" />
    @if (_showHadScanResultFlash)
    {
        <div class="spinner-grow text-success" role="status" style="position: absolute; left: calc(50% - 0.5 * 2rem); top: calc(50% - 0.5 * 2rem);">
          <span class="visually-hidden">Scaned!</span>
        </div>
    }
    else if (_showHadScanErrorFlash)
    {
        <div class="spinner-grow text-danger" role="status" style="position: absolute; left: calc(50% - 0.5 * 2rem); top: calc(50% - 0.5 * 2rem);">
          <span class="visually-hidden">Errored!</span>
        </div>
    }
    else if (ZXingScanner.ActiveMediaDevice != null)
    {
        <div class="spinner-grow text-primary" role="status" style="position: absolute; left: calc(50% - 0.5 * 2rem); top: calc(50% - 0.5 * 2rem); background-color: rgba(13, 110, 253, 0.3);">
          <span class="visually-hidden">Scanning...</span>
        </div>
    }
</button>

<Modal
    Title="Webcam Scanning"
    IsVisable="_isModalVisable"
    OnModalDismissedFromJs="() => _isModalVisable = false"
    BodyStyle="display: flex; flex-direction: column; justify-items: center; align-items: center; gap: 1em;"
>
    <Body>
        @if (ZXingScanner.MediaDevices != null)
        {
            <div class="dropdown">
                <div
                    class="btn btn-primary dropdown-toggle"
                    href="#"
                    role="button"
                    id="mediaDeviceDropdownButton"
                    data-bs-toggle="dropdown"
                    aria-expanded="false"
                >
                    @if (ZXingScanner.ActiveMediaDevice == null)
                    {
                        @("No device selected");
                    }
                    else
                    {
                        @(ZXingScanner.ActiveMediaDevice.Label);
                    }
                </div>
                <ul class="dropdown-menu" aria-labelledby="mediaDeviceDropdownButton">
                    @foreach (var mediaDevice in ZXingScanner.MediaDevices)
                    {
                        <li @key="mediaDevice.DeviceId">
                            <a class="dropdown-item" href="#" @onclick="e => EnableWebcamScanningDevice(mediaDevice)" @onclick:preventDefault>
                                @mediaDevice.Label
                            </a>
                        </li>
                    }
                    <li @key="@("_disable")">
                        <a class="dropdown-item" href="#" @onclick="e => DisableWebcamScanning()" @onclick:preventDefault>
                            Disable
                        </a>
                    </li>
                </ul>
            </div>
        }

        @if (ZXingScanner.MediaDevices == null)
        {
            <p>There are no video devices detected so webcam scanning will not work.</p>
        }
        else if (ZXingScanner.ActiveMediaDevice == null)
        {
            <p>Video scanning has been disabled, select a video device from the above dropdown list to enable video scanning.</p>
        }
        
        <video id="webcam-preview" autoplay muted playsinline width="300" height="200" style="padding: 1em; @(ZXingScanner.ActiveMediaDevice == null ? "visability: hidden;" : "")"></video>   
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    </Footer>
</Modal>

@code {
    [CascadingParameter] public ZXingScanner ZXingScanner { get; set; } = null!;
    private bool _showHadScanResultFlash = false;
    private bool _showHadScanErrorFlash = false;
    private bool _isModalVisable = false;
    private bool _hasHadFirstRender = false;
    private MediaDeviceInfo? _lastShownMediaDevice;
    private readonly TimeSpan _statusFlashDuration = TimeSpan.FromMilliseconds(600);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ZXingScanner.ScancodeDetected += HandleScancodeDetected;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _hasHadFirstRender = true;
        }

        if (_hasHadFirstRender)
        {
            await UpdateWebcamPreview();
        }
    }

    private async Task DisplayFlashScanResult()
    {
        _showHadScanResultFlash = true;
        StateHasChanged();
        await Task.Delay(_statusFlashDuration);
        _showHadScanResultFlash = false;
        StateHasChanged();
    }

    private async void HandleScancodeDetected(string scancode)
    {
        await DisplayFlashScanResult();
    }

    private async Task UpdateWebcamPreview()
    {
        if (_hasHadFirstRender
            && ZXingScanner.ActiveMediaDevice != null
            && (_lastShownMediaDevice == null || _lastShownMediaDevice.DeviceId != ZXingScanner.ActiveMediaDevice.DeviceId))
        {
            await JsRuntime.InvokeVoidAsync(
                "StreamMediaDeviceIntoVideoElement",
                "webcam-preview",
                ZXingScanner.ActiveMediaDevice.DeviceId
            );
            _lastShownMediaDevice = ZXingScanner.ActiveMediaDevice;
        }
    }

    private async Task DisableWebcamScanning()
    {
        await ZXingScanner.DisableWebCamScanning();
    }

    private async Task EnableWebcamScanningDevice(MediaDeviceInfo device)
    {
        if (ZXingScanner.ActiveMediaDevice == null || device.DeviceId != ZXingScanner.ActiveMediaDevice.DeviceId)
        {
            await ZXingScanner.EnableWebCamScanning(device);
            await UpdateWebcamPreview();
        }
    }

    public void Dispose()
    {
        ZXingScanner.ScancodeDetected -= HandleScancodeDetected;
    }
}
