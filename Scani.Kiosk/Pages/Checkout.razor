@page "/checkout"
@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ThrottledKioskSheetAccessor SheetsAccessor
@inject ActiveUserService ActiveUserService
@inject ILogger<Checkout> Logger

<PageTitle>Kiosk - Checkout</PageTitle>

<KioskScreen>
    <Screen>
        <EquipmentCheckoutMenu @ref="_checkoutMenu" OnCartChanged="HandleCartChanged" />
    </Screen>
    <Footer>
        <div class="footer">
            <LogoutButton />
            <button class="btn btn-success" disabled="@(_cart == null || _cart.IsEmpty)" @onclick="HandleCheckout">
                @if (!(_cart == null || _cart.IsEmpty))
                {
                    <img src="/assets/images/tickets.svg" style="height: 50px; margin-left: -0.5em;" />
                }
                <span style="position: relative">
                    <span style="@(_showCheckoutSpinner ? "visibility: hidden" : "")">
                        <span class="detailed-text">
                            @(_cart?.CheckoutDisplayText ?? "Checkout")
                        </span>
                        <span class="short-text">
                            Checkout
                        </span>
                    </span>
                    @if (_showCheckoutSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" style="position: absolute; left: calc(50% - 0.5 * 1rem); top: calc(50% - 0.5 * 1rem);" role="status" aria-hidden="true"></span>
                    }
                </span>
            </button>
        </div>
    </Footer>
</KioskScreen>

@code {
    [CascadingParameter] ActiveUserState ActiveUserState { get; set; } = null!;
    [CascadingParameter] public ZXingScanner ZXingScanner { get; set; } = null!;

    private EquipmentCheckoutCart? _cart;
    private string? _sheetId;
    private bool _showCheckoutSpinner = false;
    private EquipmentCheckoutMenu? _checkoutMenu;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _sheetId = Configuration.GetValue<string>("GoogleSheet:SheetId");
        ZXingScanner.ScancodeDetected += HandleScancodeDetected;
    }

    private async Task HandleScancodeDetected(string scancode)
    {
        if (_checkoutMenu != null)
        {
            await _checkoutMenu.HandleScancodeEntered(scancode);
        }
    }

    protected void HandleCartChanged(EquipmentCheckoutCart cart)
    {
        _cart = cart;
    }

    protected async Task HandleCheckout()
    {
        if (_cart == null) return;
        if (!ActiveUserState.HasActiveUser || ActiveUserState.User == null) return;

        var now = DateTime.Now;

        if (_cart.Returns.Any() || _cart.Takes.Any())
        {
            _showCheckoutSpinner = true;
            StateHasChanged();
        }

        try
        {
            if (_cart.Returns.Any())
            {
                var returnScancodes = _cart.Returns.Select(e => e.Scancode).ToHashSet();
                await ReturnEquipment(returnScancodes, now);
            }

            if (_cart.Takes.Any())
            {
                var takeScancdodes = _cart.Takes.Select(e => e.Scancode).ToList();
                await TakeEquipment(takeScancdodes, now);
            }

            await ActiveUserService.LogoutActiveUserAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception error)
        {
            _showCheckoutSpinner = false;
            Logger.LogError(error, "An error occured whilst saving a checkout cart to the google sheet.");
        }
    }

    private async Task ReturnEquipment(IReadOnlyCollection<string> equipmentScancodes, DateTime? returnDate = null)
    {
        var now = DateTime.Now;
        await KioskState.ReadStateAsync(async state =>
        {
            var associatedLoans = state.ActiveLoans
                .Where(l => equipmentScancodes.Contains(l.StudentScancode))
                .ToList();

            foreach (var loan in associatedLoans)
            {
                loan.ReturnedDate = returnDate ?? now;
            }

            await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, associatedLoans);
        });
    }

    private async Task TakeEquipment(IReadOnlyCollection<string> equipmentScancodes, DateTime? takeDate = null)
    {
        var now = DateTime.Now;

        await KioskState.ReadStateAsync(async state =>
        {
            /* We can't create a loan until we have the loan sheet and an active user, this method shouldn't ever be called unless we have both of those though... */
            if (state.LoanSheet == null || ActiveUserState.User == null) return;

            var newLoans = equipmentScancodes
                .Select(scancode => new LoanRow(ActiveUserState.User.Scancode, scancode, takeDate ?? now, state.LoanSheet))
                .ToList();

            foreach (var loan in newLoans)
            {
                state.LoanSheet.Rows.Add(loan);
            }

            await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, newLoans);
        });
    }

    public void Dispose()
    {
        ZXingScanner.ScancodeDetected -= HandleScancodeDetected;
    }
}