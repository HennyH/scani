@page "/checkout"
@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ThrottledKioskSheetAccessor SheetsAccessor
@inject ActiveUserService ActiveUserService

<PageTitle>Kiosk - Checkout</PageTitle>

<KioskScreen>
    <Screen>
        <EquipmentCheckoutMenu @ref="_checkoutMenu" OnCartChanged="HandleCartChanged" />
    </Screen>
    <Footer>
        <div class="footer">
            <LogoutButton />
            <button class="btn btn-success" disabled="@(_cart == null || _cart.IsEmpty)" @onclick="HandleCheckout">
                @if (!(_cart == null || _cart.IsEmpty))
                {
                    <img src="/assets/images/tickets.svg" style="height: 50px; margin-left: -0.5em;" />
                }
                <span style="position: relative">
                    <span style="@(_showCheckoutSpinner ? "visibility: hidden" : "")">
                        <span class="detailed-text">
                            @_checkoutButtonText
                        </span>
                        <span class="short-text">
                            Checkout
                        </span>
                    </span>
                    @if (_showCheckoutSpinner)
                    {
                        <span class="spinner-border spinner-border-sm" style="position: absolute; left: calc(50% - 0.5 * 1rem); top: calc(50% - 0.5 * 1rem);" role="status" aria-hidden="true"></span>
                    }
                </span>
            </button>
        </div>
    </Footer>
</KioskScreen>

@code {
    [CascadingParameter] ActiveUserState ActiveUserState { get; set; } = null!;
    [CascadingParameter] public ZXingScanner ZXingScanner { get; set; } = null!;

    private const string DEFAULT_CHECKOUT_BTN_TEXT = "Checkout Items";
    private EquipmentCheckoutCart? _cart;
    private string _checkoutButtonText = DEFAULT_CHECKOUT_BTN_TEXT;
    private string? _sheetId;
    private bool _showCheckoutSpinner = false;
    private EquipmentCheckoutMenu? _checkoutMenu;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _sheetId = Configuration.GetValue<string>("GoogleSheet:SheetId");
        ZXingScanner.ScancodeDetected += HandleScancodeDetected;
    }

    private async void HandleScancodeDetected(string scancode)
    {
        if (_checkoutMenu != null)
        {
            await _checkoutMenu.HandleScancodeEntered(scancode);
        }
    }

    protected void HandleCartChanged(EquipmentCheckoutCart cart)
    {
        _cart = cart;

        var sb = new StringBuilder();
        if (_cart.IsEmpty)
        {
            sb.Append(DEFAULT_CHECKOUT_BTN_TEXT);
        }
        else
        {
            if (_cart.Takes.Any())
            {
                sb.Append($"Checkout {_cart.Takes.Count()} items");
                if (_cart.Returns.Any())
                {
                    sb.Append(", ");
                }
            }
            if (_cart.Returns.Any())
            {
                sb.Append($"Return {_cart.Returns.Count()} items");
            }
        }
        _checkoutButtonText = sb.ToString();
    }

    protected async Task HandleCheckout()
    {
        if (_cart == null) return;
        if (!ActiveUserState.HasActiveUser || ActiveUserState.User == null) return;

        var now = DateTime.Now;

        if (_cart.Returns.Any() || _cart.Takes.Any())
        {
            _showCheckoutSpinner = true;
            StateHasChanged();
        }

        try
        {
            if (_cart.Returns.Any())
            {
                var returnScancodes = _cart.Returns.Select(e => e.Scancode).ToHashSet();
                await KioskState.ReadStateAsync(async state =>
                {
                    var loansToUpdate = new List<LoanRow>();
                    foreach (var loan in state.ActiveLoans)
                    {
                        if (returnScancodes.Contains(loan.EquipmentScancode))
                        {
                            loan.ReturnedDate = now;
                            loansToUpdate.Add(loan);
                        }
                    }

                    await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, loansToUpdate);
                });
            }

            if (_cart.Takes.Any())
            {
                await KioskState.ReadStateAsync(async state =>
                {
                // TODO improve erro handling
                if (state.LoanSheet != null)
                    {
                        var newLoans = _cart.Takes
                        .Select(e => new LoanRow(ActiveUserState.User.Scancode, e.Scancode, now.ToString(), state.LoanSheet))
                        .ToList();

                        foreach (var loan in newLoans)
                        {
                            state.LoanSheet.Rows.Add(loan);
                        }

                        await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, newLoans);
                    }
                });
            }

            ActiveUserService.LogoutActiveUser();
            NavigationManager.NavigateTo("/");
        }
        // TODO improve error handling
        catch (Exception _)
        {
            _showCheckoutSpinner = false;
        }
    }

    public void Dispose()
    {
        ZXingScanner.ScancodeDetected -= HandleScancodeDetected;
    }
}