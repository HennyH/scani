@page "/checkout"
@inject SynchronizedKioskState KioskState
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject LazyAsyncThrottledAccessor<SheetsService> SheetsAccessor

<PageTitle>Kiosk - Checkout</PageTitle>

<KioskScreen>
    <Screen>
        <EquipmentCheckoutMenu OnCartChanged="HandleCartChanged" />
    </Screen>
    <Footer>
        <div class="footer">
            <LogoutButton OnLogout="ResetCart" />
            <button disabled="@(_cart == null || _cart.IsEmpty)" @onclick="HandleCheckout">
                @if (!(_cart == null || _cart.IsEmpty))
                {
                    <img src="/assets/images/tickets.svg" style="height: 60px" />
                }
                @_checkoutButtonText
            </button>
        </div>
    </Footer>
</KioskScreen>

@code {
    [CascadingParameter] ActiveUserState ActiveUserState { get; set; } = null!;
    private const string DEFAULT_CHECKOUT_BTN_TEXT = "Checkout Items";
    private EquipmentCheckoutCart? _cart;
    private string _checkoutButtonText = DEFAULT_CHECKOUT_BTN_TEXT;
    private string? _sheetId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _sheetId = Configuration.GetValue<string>("GoogleSheet:SheetId");
    }

    protected void ResetCart()
    {
        HandleCartChanged(new EquipmentCheckoutCart());
    }

    protected void HandleCartChanged(EquipmentCheckoutCart cart)
    {
        _cart = cart;

        var sb = new StringBuilder();
        if (_cart.IsEmpty)
        {
            sb.Append(DEFAULT_CHECKOUT_BTN_TEXT);
        }
        else
        {
            if (_cart.RequestedEquipment.Any())
            {
                sb.Append($"Checkout {_cart.RequestedEquipment.Count()} items");
                if (_cart.ReturnedEquipment.Any())
                {
                    sb.Append(", ");
                }
            }
            if (_cart.ReturnedEquipment.Any())
            {
                sb.Append($"Return {_cart.ReturnedEquipment.Count()} items");
            }
        }
        _checkoutButtonText = sb.ToString();
    }

    protected async Task HandleCheckout()
    {
        if (_cart == null) return;
        if (!ActiveUserState.HasActiveUser || ActiveUserState.UserInfo == null) return;

        var now = DateTime.Now;

        if (_cart.ReturnedEquipmentIds.Any())
        {
            await KioskState.ReadStateAsync(async state =>
            {
                var loansToUpdate = new List<LoanRow>();
                foreach (var loan in state.ActiveLoansForUser(ActiveUserState.UserInfo.Id))
                {
                    if (_cart.ReturnedEquipmentIds.Contains(loan.EquipmentScancode))
                    {
                        loan.ReturnedDate = now;
                        loansToUpdate.Add(loan);
                    }
                }

                await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, loansToUpdate);
            });
        }

        if (_cart.RequestedEquipmentIds.Any())
        {
            await KioskState.ReadStateAsync(async state =>
            {
                var newLoans = _cart.RequestedEquipmentIds
                    .Select(equipmentScancode
                        => new LoanRow(ActiveUserState.UserInfo.Id, equipmentScancode, now.ToString(), state.LoanSheet))
                    .ToList();

                foreach (var loan in newLoans)
                {
                    state.LoanSheet.Rows.Add(loan);
                }

                await KioskSheetRowWriter.UpdateRowsAsync(_sheetId!, "Loans", SheetsAccessor, newLoans);
            });
        }

        NavigationManager.NavigateTo("/");
    }
}