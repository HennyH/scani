@page "/login"
@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject NavigationManager NavigationManager
@inject ActiveUserService ActiveUserService

<KioskScreen AllowAnonymous="true" MainStyle="display: flex; flex-direction: column; justify-content: center; align-items: center;">
    <Screen>
        <section class="screen">
            <form @onsubmit="@HandleLoginFormSubmitted">
                <ScannerImage />
                <label>
                    Name or Scancode:
                    <input type="text" @bind-value="@_scancode" />
                </label>
                <input type="submit" value="Login" />
                @if (_loginErrorMessage != null)
                {
                    <p class="validation-message">@_loginErrorMessage</p>
                }
            </form>
            <p>
                Welcome to the Kiosk, you can use this system to loan equipment. To get started you need to tell the system who you are by choosing to do one of the following options:
            </p>
            <ul>
                <li>Enter your email address into the form above.</li>
                <li>Enter your student scancode into the form above.</li>
                <li>Use a barcode scanner attached to this system to scan your student scancode.</li>
                <li>Use a QR code scanner attached to this system to scan your student scancode.</li>
            </ul>
        </section>
    </Screen>
</KioskScreen>

@code {
    [CascadingParameter] public ZXingScanner ZXingScanner { get; set; } = null!;
    private string _scancode { get; set; } = string.Empty;
    private string? _loginErrorMessage { get; set; } = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ZXingScanner.ScancodeDetected += HandleScancodeDetectedAsync;
    }

    private async Task TryLoginWithScancode(string scancode)
    {
        var user = await KioskState.ReadStateAsync(s => Task.FromResult(s.StudentWithScancode(scancode)));

        if (user == null)
        {
            _loginErrorMessage = user == null
                ? "User not found"
                : null;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            _loginErrorMessage = null;
            await ActiveUserService.SetActiveUserAsync(user);
            NavigationManager.NavigateTo("/checkout");
        }
    }

    private async Task HandleScancodeDetectedAsync(string scancode)
    {
        await TryLoginWithScancode(scancode);
    }

    private async Task HandleLoginFormSubmitted()
    {
        if (!string.IsNullOrWhiteSpace(_scancode))
        {
            await TryLoginWithScancode(_scancode);
        }
        else
        {
            _loginErrorMessage = "Please enter valid name, email, or scancode";
        }
    }

    public void Dispose()
    {
        ZXingScanner.ScancodeDetected -= HandleScancodeDetectedAsync;
    }
}
