@page "/login"
@implements IDisposable
@inject SynchronizedKioskState KioskState
@inject NavigationManager NavigationManager
@inject ActiveUserService ActiveUserService

<KioskScreen AllowAnonymous="true">
    <Screen>
        <form @onsubmit="@HandleLoginFormSubmitted">
            <ScannerImage />
            <label>
                Name or Scancode:
                <input type="text" @bind-value="@_scancode" />
            </label>
            <input type="submit" value="Login" />
            @if (_loginErrorMessage != null)
            {
                <p class="validation-message">@_loginErrorMessage</p>
            }
        </form>
    </Screen>
</KioskScreen>

@code {
    [CascadingParameter] public ZXingScanner ZXingScanner { get; set; } = null!;
    private string _scancode { get; set; } = string.Empty;
    private string? _loginErrorMessage { get; set; } = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ZXingScanner.ScancodeDetected += HandleScancodeDetected;
    }

    private async Task TryLoginWithScancode(string scancode)
    {
        var user = await KioskState.ReadStateAsync(s => Task.FromResult(s.StudentWithScancode(scancode)));
        _loginErrorMessage = user == null
            ? "User not found"
            : null;
        if (user != null)
        {
            ActiveUserService.SetActiveUser(user);
            NavigationManager.NavigateTo("/checkout");
        }
    }

    private async void HandleScancodeDetected(string scancode)
    {
        await TryLoginWithScancode(scancode);
    }

    private async Task HandleLoginFormSubmitted()
    {
        if (!string.IsNullOrWhiteSpace(_scancode))
        {
            await TryLoginWithScancode(_scancode);
        }
        else
        {
            _loginErrorMessage = "Please enter valid name, email, or scancode";
        }
    }

    public void Dispose()
    {
        ZXingScanner.ScancodeDetected -= HandleScancodeDetected;
    }
}
